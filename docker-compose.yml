services:
  ragbot:
    build: .
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  db:
    image: pgvector/pgvector:pg14
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    env_file:
      - .env
    ports:
      - 5432:5432
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 15s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - SSL_MODE=${SSL_MODE:-production}
    env_file:
      - .env
    depends_on:
      ragbot:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    command: >
      /bin/sh -c "
        # Check if SSL certificates exist
        if [ -f /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem ] && [ \"$$SSL_MODE\" = \"production\" ]; then
          echo 'SSL certificates found. Using HTTPS configuration...'
          envsubst '$$DOMAIN_NAME' < /etc/nginx/conf.d/https-template > /etc/nginx/conf.d/default.conf
        else
          echo 'No SSL certificates found or development mode. Using HTTP-only configuration...'
          envsubst '$$DOMAIN_NAME' < /etc/nginx/conf.d/http-template > /etc/nginx/conf.d/default.conf
        fi &&
        echo 'Waiting for ragbot service to be available...' &&
        while ! wget -q -O- http://ragbot:8080/health 2>/dev/null; do sleep 2; done &&
        echo 'Ragbot service is available. Starting nginx...' &&
        nginx -g 'daemon off;'
      "
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost/health", "||", "wget", "-qO-", "https://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    profiles:
      - ssl
    depends_on:
      nginx:
        condition: service_healthy
    command: >
      /bin/sh -c "
        echo 'Waiting 30 seconds for nginx to be fully ready...' &&
        sleep 30 &&
        if [ ! -f /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem ]; then
          echo 'Obtaining SSL certificate for ${DOMAIN_NAME}...' &&
          certbot certonly --webroot -w /var/www/certbot \
            --email ${SSL_EMAIL:-admin@${DOMAIN_NAME}} \
            -d ${DOMAIN_NAME} \
            --rsa-key-size 4096 \
            --agree-tos \
            --non-interactive \
            ${CERTBOT_STAGING:---staging}
        else
          echo 'SSL certificate already exists.'
        fi &&
        # Start renewal daemon
        trap exit TERM; 
        while :; do 
          certbot renew --webroot -w /var/www/certbot; 
          sleep 12h & wait \$\${!}; 
        done
      "
    networks:
      - app-network
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
      - SSL_EMAIL=${SSL_EMAIL}
      - CERTBOT_STAGING=${CERTBOT_STAGING}

volumes:
  db_data:

networks:
  app-network:
    driver: bridge
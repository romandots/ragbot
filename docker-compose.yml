services:
  ragbot:
    build: .
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  db:
    image: pgvector/pgvector:pg14
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    env_file:
      - .env
    ports:
      - 5432:5432
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 15s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
    env_file:
      - .env
    depends_on:
      ragbot:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    command: >
      /bin/sh -c "
        envsubst '$$DOMAIN_NAME' < /etc/nginx/conf.d/template > /etc/nginx/conf.d/default.conf &&
        echo 'Ожидание доступности сервиса ragbot...' &&
        while ! wget -q -O- http://ragbot:8080/health; do sleep 5; done &&
        echo 'Сервис ragbot доступен. Запуск nginx...' &&
        nginx -g 'daemon off;'
      "
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    restart: unless-stopped
    depends_on:
      nginx:
        condition: service_healthy
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - app-network

volumes:
  db_data:

networks:
  app-network:
    driver: bridge

